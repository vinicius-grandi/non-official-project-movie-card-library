{"version":3,"sources":["components/Header.jsx","components/SearchBar.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/AddMovieInputs.jsx","components/AddMovie.jsx","hooks/useFilter.js","components/MovieLibrary.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","SearchBar","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","data-testid","htmlFor","type","value","onChange","e","target","id","checked","defaultProps","Rating","rating","this","props","MovieCard","movie","title","subtitle","storyline","imagePath","alt","src","MovieList","movies","map","key","AddMovieInputs","info","fn","max","undefined","min","initialState","genre","AddMovie","onClick","useState","setMovie","movieChangeHandler","titulo","subtitulo","imagem","nota","cols","rows","useFilter","dep","useLayoutEffect","MovieLibrary","setSearchText","cbookmarkedOnly","setCbookmarkedOnly","setSelectedGenre","filteredMovies","setFilteredMovies","observer","setObserver","textFilter","filter","regex","RegExp","match","bookmarkFilter","bookmarked","genreFilter","didMountRef","useRef","current","push","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71b06974.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <header className=\"movie-card-header\">\r\n        <h1 className=\"page-title\">Movie Cards Library</h1>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Proptypes from 'prop-types';\r\n// implement SearchBar component here\r\nconst SearchBar = ({\r\n  searchText, onSearchTextChange,\r\n  bookmarkedOnly, onBookmarkedChange,\r\n  selectedGenre, onSelectedGenreChange }) => (\r\n  // eslint-disable-next-line react/jsx-indent\r\n  <form data-testid=\"search-bar-form\" className=\"search-bar\">\r\n    <label data-testid=\"text-input-label\" htmlFor=\"searchText\">\r\n      Inclui o texto:\r\n      <input\r\n        type=\"text\"\r\n        data-testid=\"text-input\"\r\n        value={ searchText }\r\n        onChange={ (e) => onSearchTextChange(e.target.value) }\r\n        id=\"searchText\"\r\n      />\r\n    </label>\r\n    <label htmlFor=\"checkBox\" data-testid=\"checkbox-input-label\">\r\n      Mostrar somente favoritos\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"checkBox\"\r\n        data-testid=\"checkbox-input\"\r\n        checked={ bookmarkedOnly }\r\n        onChange={ (e) => onBookmarkedChange(e.target.checked) }\r\n      />\r\n    </label>\r\n    <label htmlFor=\"genderSelect\" data-testid=\"select-input-label\">\r\n      Filtrar por gênero\r\n      <select\r\n        id=\"genderSelect\"\r\n        data-testid=\"select-input\"\r\n        value={ selectedGenre }\r\n        onChange={ (e) => onSelectedGenreChange(e.target.value) }\r\n      >\r\n        <option value=\"\" data-testid=\"select-option\">Todos</option>\r\n        <option value=\"action\" data-testid=\"select-option\">Ação</option>\r\n        <option value=\"comedy\" data-testid=\"select-option\">Comédia</option>\r\n        <option value=\"thriller\" data-testid=\"select-option\">Suspense</option>\r\n      </select>\r\n    </label>\r\n  </form>\r\n);\r\n\r\nSearchBar.propTypes = {\r\n  searchText: Proptypes.string,\r\n  onSearchTextChange: Proptypes.func.isRequired,\r\n  bookmarkedOnly: Proptypes.bool,\r\n  onBookmarkedChange: Proptypes.func.isRequired,\r\n  selectedGenre: Proptypes.string,\r\n  onSelectedGenreChange: Proptypes.func.isRequired,\r\n};\r\n\r\nSearchBar.defaultProps = {\r\n  searchText: '',\r\n  bookmarkedOnly: false,\r\n  selectedGenre: '',\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Rating extends React.Component {\r\n  render() {\r\n    const { rating } = this.props;\r\n    return (\r\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\r\n        <span className=\"rating\">{rating}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRating.propTypes = { rating: PropTypes.number };\r\n\r\nRating.defaultProps = {\r\n  rating: 'undefined',\r\n};\r\n\r\nexport default Rating;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Rating from './Rating';\r\n\r\nclass MovieCard extends React.Component {\r\n  render() {\r\n    const { movie } = this.props;\r\n    const { title, subtitle, storyline, rating, imagePath } = movie;\r\n    return (\r\n      <div className=\"movie-card\" data-testid=\"movie-card\">\r\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\r\n        <div className=\"movie-card-body\">\r\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\r\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\r\n          <p className=\"movie-card-storyline\">{storyline}</p>\r\n        </div>\r\n        <Rating rating={ rating } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieCard.propTypes = {\r\n  movie: PropTypes.shape({\r\n    title: PropTypes.string,\r\n    subtitle: PropTypes.string,\r\n    storyline: PropTypes.string,\r\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    imagePath: PropTypes.string,\r\n  }).isRequired,\r\n};\r\n\r\nexport default MovieCard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport MovieCard from './MovieCard';\r\n\r\nclass MovieList extends React.Component {\r\n  render() {\r\n    const { movies } = this.props;\r\n\r\n    return (\r\n      <div data-testid=\"movie-list\" className=\"movie-list\">\r\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.object,\r\n  ).isRequired,\r\n};\r\n\r\nexport default MovieList;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddMovieInputs = ({ info, fn }) => {\n  const maxLine = 5;\n  const minLine = 0;\n  return (\n    <label htmlFor={ info[1] } data-testid={ `${info[4]}-input-label` }>\n      {info[3]}\n      <input\n        type={ info[0] }\n        id={ info[1] }\n        max={ info[0] === 'number' ? maxLine : undefined }\n        min={ info[0] === 'number' ? minLine : undefined }\n        data-testid={ `${info[4]}-input` }\n        value={ info[2] }\n        onChange={ (e) => fn(e) }\n      />\n    </label>\n  );\n};\n\nAddMovieInputs.propTypes = {\n  info: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n  ).isRequired,\n  fn: PropTypes.func.isRequired,\n};\n\nexport default AddMovieInputs;\n","import propTypes from 'prop-types';\r\nimport React from 'react';\r\nimport AddMovieInputs from './AddMovieInputs';\r\n// implement AddMovie component here\r\nconst initialState = {\r\n  subtitle: '',\r\n  title: '',\r\n  imagePath: '',\r\n  storyline: '',\r\n  rating: 0,\r\n  genre: 'action',\r\n};\r\nconst AddMovie = ({ onClick }) => {\r\n  const [movie, setMovie] = React.useState(initialState);\r\n  const movieChangeHandler = (e) => setMovie({ ...movie, [e.target.id]: e.target.value });\r\n  const { title, subtitle, imagePath, storyline, rating, genre } = movie;\r\n  const titulo = ['text', 'title', title, 'Título', 'title'];\r\n  const subtitulo = ['text', 'subtitle', subtitle, 'Subtítulo', 'subtitle'];\r\n  const imagem = ['text', 'imagePath', imagePath, 'Imagem', 'image'];\r\n  const nota = ['number', 'rating', rating, 'Avaliação', 'rating'];\r\n  return (\r\n    <form data-testid=\"add-movie-form\" className=\"add-movie\">\r\n      <AddMovieInputs info={ titulo } fn={ movieChangeHandler } />\r\n      <AddMovieInputs info={ subtitulo } fn={ movieChangeHandler } />\r\n      <AddMovieInputs info={ imagem } fn={ movieChangeHandler } />\r\n      <label htmlFor=\"storyline\" data-testid=\"storyline-input-label\">\r\n        Sinopse\r\n        <textarea\r\n          id=\"storyline\"\r\n          cols=\"30\"\r\n          rows=\"5\"\r\n          value={ storyline }\r\n          onChange={ (e) => movieChangeHandler(e) }\r\n          data-testid=\"storyline-input\"\r\n        />\r\n      </label>\r\n      <AddMovieInputs info={ nota } fn={ movieChangeHandler } />\r\n      <label htmlFor=\"genre\" data-testid=\"genre-input-label\">\r\n        Gênero\r\n        <select\r\n          id=\"genre\"\r\n          value={ genre }\r\n          data-testid=\"genre-input\"\r\n          onChange={ (e) => movieChangeHandler(e) }\r\n        >\r\n          <option value=\"action\" data-testid=\"genre-option\">Ação</option>\r\n          <option value=\"comedy\" data-testid=\"genre-option\">Comédia</option>\r\n          <option value=\"thriller\" data-testid=\"genre-option\">Suspense</option>\r\n        </select>\r\n      </label>\r\n      <button\r\n        type=\"button\"\r\n        data-testid=\"send-button\"\r\n        onClick={ () => {\r\n          onClick(movie); setMovie(initialState);\r\n        } }\r\n      >\r\n        Adicionar filme\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddMovie.propTypes = {\r\n  onClick: propTypes.func.isRequired,\r\n};\r\n\r\nexport default AddMovie;\r\n","import { useLayoutEffect } from 'react';\n\nfunction useFilter(fn, dep) {\n  useLayoutEffect(fn, [...dep]);\n}\n\nexport default useFilter;\n","import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SearchBar from './SearchBar';\r\nimport MovieList from './MovieList';\r\nimport AddMovie from './AddMovie';\r\nimport useFilter from '../hooks/useFilter';\r\n// implement MovieLibrary component here\r\nconst MovieLibrary = ({ movies }) => {\r\n  const [searchText, setSearchText] = React.useState('');\r\n  const [cbookmarkedOnly, setCbookmarkedOnly] = React.useState(false);\r\n  const [selectedGenre, setSelectedGenre] = React.useState('');\r\n  const [filteredMovies, setFilteredMovies] = React.useState(movies);\r\n  const [observer, setObserver] = React.useState(false);\r\n  // Filters\r\n  const textFilter = movies.filter((movie) => {\r\n    const regex = new RegExp(`${searchText}`, 'ig');\r\n    const { title, subtitle, storyline } = movie;\r\n    if (searchText === '') return movie.title.match(/./);\r\n    return title.match(regex)\r\n    || subtitle.match(regex)\r\n    || storyline.match(regex);\r\n  });\r\n  const bookmarkFilter = ({ bookmarked }) => {\r\n    if (cbookmarkedOnly === false) return true;\r\n    return bookmarked === cbookmarkedOnly;\r\n  };\r\n  const genreFilter = ({ genre }) => {\r\n    if (selectedGenre === '') return true;\r\n    return genre === selectedGenre;\r\n  };\r\n  // Custom hook with useLayoutEffect\r\n  const didMountRef = useRef(false);\r\n  useFilter(() => {\r\n    if (didMountRef.current) {\r\n      setFilteredMovies(textFilter.filter(bookmarkFilter).filter(genreFilter));\r\n    }\r\n    didMountRef.current = true;\r\n  }, [searchText, cbookmarkedOnly, selectedGenre, observer]);\r\n  return (\r\n    <>\r\n      <SearchBar\r\n        searchText={ searchText }\r\n        onSearchTextChange={ setSearchText }\r\n        bookmarkedOnly={ cbookmarkedOnly }\r\n        onBookmarkedChange={ setCbookmarkedOnly }\r\n        selectedGenre={ selectedGenre }\r\n        onSelectedGenreChange={ setSelectedGenre }\r\n      />\r\n      <MovieList movies={ filteredMovies } />\r\n      <AddMovie\r\n        onClick={ (movie) => { movies.push(movie); setObserver(!observer); } }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nMovieLibrary.propTypes = {\r\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default MovieLibrary;\r\n","const movies = [\r\n  {\r\n    title: 'Kingsglaive',\r\n    subtitle: 'Final Fantasy XV',\r\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\r\n    rating: 4.5,\r\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\r\n    bookmarked: true,\r\n    genre: 'action',\r\n  },\r\n  {\r\n    title: 'Final Fantasy',\r\n    subtitle: 'Spirits Within',\r\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\r\n    rating: 4.5,\r\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\r\n    bookmarked: false,\r\n    genre: 'fantasy',\r\n  },\r\n  {\r\n    title: 'Ghost In The Shell',\r\n    subtitle: 'Ghost In The Shell',\r\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\r\n    rating: 5,\r\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\r\n    bookmarked: false,\r\n    genre: 'comedy',\r\n  },\r\n  {\r\n    title: 'Appleseed Alpha',\r\n    subtitle: 'Appleseed Alpha',\r\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\r\n    rating: 3.8,\r\n    imagePath: 'images/Appleseed_Alpha.jpg',\r\n    bookmarked: true,\r\n    genre: 'action',\r\n  },\r\n  {\r\n    title: 'Resident Evil',\r\n    subtitle: 'Vendetta',\r\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\r\n    rating: 4.2,\r\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\r\n    bookmarked: true,\r\n    genre: 'fantasy',\r\n  },\r\n];\r\n\r\nexport default movies;\r\n","import React from 'react';\r\nimport Header from './components/Header';\r\nimport './App.css';\r\nimport MovieLibrary from './components/MovieLibrary';\r\nimport movies from './data';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <MovieLibrary movies={ movies } />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}